on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
name: Build, Scan and Deploy
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: 'Set up Google Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    
    - run: |-
        gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
        

    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Run Bridgecrew 
      id: Bridgecrew
      uses: bridgecrewio/bridgecrew-action@master 
      env:
        PRISMA_API_URL: https://api2.prismacloud.io
        LOG_LEVEL: DEBUG 
      with:
        api-key: ${{ secrets.BC_API_KEY }}
        soft_fail: true
        external_checks_dirs: ./checkov
        download_external_modules: true 
    # optional: download external terraform modules from public git repositories and terraform registry
    # - name: Expose report
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: SARIF results
    #     path: results.sarif
    # # Uploads results.sarif to GitHub repository using the upload-sarif action
    # - uses: github/codeql-action/upload-sarif@v1
    #   with:
    #     # Path to SARIF file relative to the root of the repository
    #     sarif_file: results.sarif
    - name: Login to Amazon ECR
      id: login-ecr 
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build the image 
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

    - name: Prisma Cloud image scan
      id: scan
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      uses: PaloAltoNetworks/prisma-cloud-scan@v1
      with:
        pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
        pcc_user: ${{ secrets.PCC_USER }}
        pcc_pass: ${{ secrets.PCC_PASS }}
        image_name: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.sha }}
    - name: tag, and push the image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Deploy to Kubernetes cluster                                                                            
      uses: kodermax/kubectl-aws-eks@master                                                                         
      env:   
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }} 
        IMAGE_TAG: ${{ github.sha }}                                                                                                      
        RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:$IMAGE_TAG
      with:                                                                                                         
        args: set image deployment/python-server-github python-server-app=${{ env.RELEASE_IMAGE }} --record -n default  

  # Build the Docker image
    - name: Build
      run: |-
        docker build --tag "gcr.io/${PROJECT_ID}/$IMAGE:${{ steps.vars.outputs.docker_tag }}" .

  # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/${IMAGE}:${{ steps.vars.outputs.docker_tag }}"

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: 4.5.4

    - name: Update deploy image
      working-directory: deploy
      run: |-
        kustomize edit set image "gcr.io/$PROJECT_ID/${IMAGE}:${{ steps.vars.outputs.docker_tag }}"
        cat kustomization.yaml
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide

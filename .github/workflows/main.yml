on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
name: Build, Scan and Deploy
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Checkout repo
      uses: actions/checkout@v2

    # - name: Run Bridgecrew 
    #   id: Bridgecrew
    #   uses: bridgecrewio/bridgecrew-action@master 
    #   env:
    #     PRISMA_API_URL: https://api2.prismacloud.io
    #     LOG_LEVEL: DEBUG 
    #   with:
    #     api-key: ${{ secrets.BC_API_KEY }}


    name: Run Prisma Cloud IaC Scan to check 
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Run Scan on IaC files in the repository
          uses: prisma-cloud-shiftleft/iac-scan-action@v1
          id: iac-scan
          with:
            prisma_api_url: 'https://api2.prismacloud.io'
            access_key: ${{ secrets.PCC_USER }}
            secret_key: ${{ secrets.PCC_USER }}
            asset_name: 'python_script'
            template_type: 'K8S'
            template_version: '0.13'
        - name: Upload scan result artifact
          uses: actions/upload-artifact@v2
          if: success() || failure()
          with:
            name: iac_scan_result
            path: ${{ steps.iac-scan.outputs.iac_scan_result_path }}

    - name: Login to Amazon ECR
      id: login-ecr 
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build the image 
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

    - name: Prisma Cloud image scan
      id: scan
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      uses: PaloAltoNetworks/prisma-cloud-scan@v1
      with:
        pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
        pcc_user: ${{ secrets.PCC_USER }}
        pcc_pass: ${{ secrets.PCC_PASS }}
        image_name: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.sha }}
    - name: tag, and push the image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Deploy to Kubernetes cluster                                                                            
      uses: kodermax/kubectl-aws-eks@master                                                                         
      env:   
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }} 
        IMAGE_TAG: ${{ github.sha }}                                                                                                      
        RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:$IMAGE_TAG
      with:                                                                                                         
        args: set image deployment/python-server-github python-server-app=${{ env.RELEASE_IMAGE }} --record -n default   